continue
data["ISD"]["cards"][195]
data["ISD"]["cards"][195]["names"]
data["ISD"]["cards"][194]["names"]
data["ISD"]["cards"][194]["layout"]
data["ISD"]["cards"][194]
data["ISD"]["cards"][193]
data["ISD"]["cards"][229]
data["ISD"]["cards"][213]
data["ISD"]["cards"][224]
data["ISD"]["cards"][223]
data["ISD"]["cards"][222]
data["ISD"]["cards"][222"]
data["ISD"]["cards"][222"
data["ISD"]["cards"][242"
data["ISD"]["cards"][235]
data["ISD"]["cards"][234]
data["ISD"]["cards"][233]
continue
data
card.errors
data
card
continue
data["ISD"]["cards"][194]["names"]
data["ISD"]["cards"][194]["names
data["ISD"]["cards"][194]["layout"]
data["ISD"]["cards"][194]["layout"
data["ISD"]["cards"][194]
data["ISD"]["cards"][193]
data["ISD"]["cards"][253]
data["ISD"]["cards"][283]
data["ISD"]["cards"].count
data["ISD"]["cards"][300]
data["ISD"]["cards"][245]
data["ISD"]["cards"][240]
data["ISD"]["cards"][123]
data["ISD"]["cards"]
data["ISD"]
data["INN"]
data["CHK"]["cards"][132]["names"]
data["CHK"]["cards"][132]["layout"]["names"]
data["CHK"]["cards"][132]["text"]
data["CHK"]["cards"][132]["layout"]
data["CHK"]["cards"][132]["flips"]
data["CHK"]["cards"][132]["flip"]
data["CHK"]["cards"][132]
data["CHK"]["cards"][133]
data["CHK"]["cards"][132]
data["CHK"]["cards"][133]
data["CHK"]["cards"][132]
data["CHK"]["cards"][131]
data["CHK"]["cards"][130]
data["CHK"]["cards"][129]
data["CHK"]["cards"]
data["CHK"]
data.keys
exit
quite
card_data
card_data["multiverseid"]
printing.card
printing.errors
exit
data["multiverseid"]
data["multiverse_id"]
data["multiverse_id
data
card_data
card.printings
card.id
exit
printing.errors
c
ban
new_ban
c
n
params
prams
result.count
c
query
result.count
n
result.count
n
result.count
c
params
c
n
@cards
n
result.count
n
c
result.to_a.uniq(&:name)[0 ... 25]
limit
lmit
n
limit
result.count
n
result
n
result.count
result
c
@cards.count
n
result
n
limit
n
result.count
n
result.count
n
result.count
n
result.count
n
result.count
n
result.count
n
result.count
c
n
result.count
n
c
params[:is_tiny_leader]
result.count
n
result.count
n
result.count
n
result.count
c
result.count
result.count - result.where("name NOT IN (?)", params[:excluded_card_names]).count
result.where("name NOT IN (?)", params[:excluded_card_names]).count
result.where("name IN (?)", params[:excluded_card_names]).count
result.where("name IN (?)", params[:excluded_card_names])
n
c
params[:excluded_card_names]
result.count
result.where(name: "Shivan Dragon").count
n
result.where(name: "Shivan Dragon").count
n
params[:card_text]
result.where(name: "Shivan Dragon").count
n
result.where(name: "Shivan Dragon").count
params[:included_colors]
n
result.count
c
Card.joins(join_statement).where(query, *arguments).count
Card.joins(join_statement).where(query, *arguments)
n
result
c
result.map(&:name)
result.count
n
arguments
query
n
result.count
c
result.map { |c| c.taggings.count }
result.map(&:taggings)
result.map(&:name)
result.count
c
limitc
params[:limit]
limit
n
result.count
c
result.count
result
n
query
n
result.count
n
result.count
n
result.count
n
result.count
n
result.count
n
result.count
c
Category.find(18)
arguments
query
n
result.count
n
result.count
n
result.count
n
result.count
n
c
params[:category_ids]
params
c
params[:category_ids]
params
c
prams
params[:category_ids]
prams[:category_ids]
params
c
params[:category_ids]
params
c
params[:category_ids]
params
c
params[:category_ids]
params.category_ids
params.category
params
c
@deck.update(deck_params)
c
n
deck_params
@deck
c
n
result.count
n
result.count
c
result.countc
result.count
result.where("name NOT IN (?)", params[:excluded_card_names])
result.where("name LIKE '%Rafiq%'")
result.where("name LIKE '%Rafiq%')
n
