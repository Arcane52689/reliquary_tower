c
n
result.count
n
result.count
c
result.countc
result.count
result.where("name NOT IN (?)", params[:excluded_card_names])
result.where("name LIKE '%Rafiq%'")
result.where("name LIKE '%Rafiq%')
n
result.where("name LIKE '%Rafiq%'")
result.where("name LIKE '%Rafiq%')
result.count
n
params[:excluded_card_names]
result.count
n
result.count
n
result.count
n
result.count
continue
n
c
result.count
result
continue
c
result.where("name NOT IN (?)", params[:excluded_card_names]).where("name LIKE '%Rafiq%'")c
result.where("name NOT IN (?)", params[:excluded_card_names]).where("name LIKE '%Rafiq%'")
result.where("name NOT IN (?)", params[:excluded_card_names]).where("name LIKE '%Rafiq%')
result.where("name NOT IN (?)", params[:excluded_card_names]).where(name: "Rafiq of the Many")
result.where("name NOT IN (?)", params[:excluded_card_names])
result.count
n
result.count
c
params[:excluded_card_names]
;2C
params
prams[:excucluded_card_names]
result.count
n
result.count
n
result.count
n
c
n
c
n
params
n
c
result.map(&:name)
reult.map(&:name)
result.count
n
c
n
result.count
n
result.count
c
n
c
result.count
n
c
n
params[:commander]
c
result.count
n
c
exit
c
produces.select { |k,v| v }.keys
produces.select { |k,v| v }
produces['any color'] = true
produces
c
produces.any? { |k,v| v }
produces.select { |k,v| v }
produces
c
color
c
contine
produces[COLOR_DICT[symbol[1]]] = true
produces
COLOR_DICT[symbol[1]]
COLOR_DICT
symbol[1]
symbol
c
a
query
n
c
cc
c
query
c
n
self
c
Category.find(8).is_keyword
Category.find(8).is_tribal
Category.find(8).generate_query
Category.find(8)
params[:category_ids]
category_ids
query
n
result.count
c
cc
c
n
params[:category_ids]
n
c
build :elementals
create :elementals
:elves
create :elves
create
create :elves
elves
c
continue
c
result.limit(10)
limit
n
c
params[:limit]
c
nc
params[:limit]
limit
n
result.count
n
result.count
n
result.count
n
result.count
c
result.count
c
params
c
params
c
params[:included_colors]
params
c
params
params[:included_colors]
c
params
params.permit(included_colors:[])
continue
params[:included_colors]
result
n
result.count
n
result.count
n
result
continue
file
file.close
file
data
exit
file_name
continue
data
file.close
file
continue
params[:deck][:card_slots].select { |c| !c[:card_id] }
params[:deck][:card_slots]
params[:deck]
n
status
n
continue
params[:deck][:card_slots]
@deck.errors
@deck
n
status
n
continue
@deck.card_slots.select { |c| c.errors.full_messages.any? }[0].errors
@deck.card_slots.select { |c| c.errors.full_messages.any? }
@deck.card_slots
@deck.errors
@deck
n
status
n
continue
n
status
n
continue
deck_params[:format]
deck_params
continue
params[:deck][:format]
params[:deck]
params
continue
params
params[:deck]
params[:deck][:format]
params[:deck]
params.deck
params
continue
params[:format]
params[:deck][:format]
params[:deck]
params[:deck
params
continue
params[:format]continue
params[:format]
params
continue
n
@deck.card_slots
@deck
continue
contineu
@deck.card_slots
@deck.save
continue
result.uniq { |c| c.name }.count
result.uniq { |c| c.name }
result..uniq { |c| c.name }
result.count
continue
data['LEA']['type']
data['LEA']['name']
data['LEA']['magicCardsInfoCode']
