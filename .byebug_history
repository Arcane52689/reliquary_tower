continue
debugger
continue
@deck.card_slots.count
@deck.card_slots
continue
card_slot.errors
continue
params
deck_params
@deck.card_slots[2].errors.full_messages
@deck.card_slots[1].errors.full_messages
@deck.card_slots[0].errors.full_messages
@deck.card_slots[0].errors
@deck.errors
continue
n
card_slots
n
to_remove_ids
to_remove-ids
n
id_hash
continue
n
to_remove_objects
n
continue
to_remove_ids
to_remove_objects
n
continue
to_remove_objects
n
to_remove_objects
n
id_hash
continue
next
new_ids
continue
@deck.save
continue
@deck.card_slots[0].errors
@deck.card_slots.errors
@deck.save
continue
@deck.save
@deck.errors
@deck.save
@deck
continue
@deck.errors
@deck.save
continue
@deck.save
@deck
continue
cointinue
continue
@deck.errors.full_messages
@deck.save
@deck.card_slots[0].errors
@deck.errors
@deck.save
@deck.card_slots
continue
@deck.card_slots
@deck.save
@deck.card_slots.create_or_update(deck_params[:card_slots][0])
@deck.save
@deck.card_slots.save
@deck.card_slots
@deck.card_slots= deck_params[:card_slots]
@deck.card_slots= params[:card_slots]
deck_params
@deck.card_slots.create_or_update
@deck.card_slots
@deck
continue
self.card_slots
self
continue
params.permit(:card_slots)
params
deck_params
@deck.card_slots
@deck
continue
@deck.user_id = current_user.id
@deck.errors
@deck.save
@deck
n
@deck
continue
params.permit(card_slots:[:location, :quantity, :card_id])
params.permit(card_slots:[:location, :quantity])
params.permit(card_slots:[:location])
params.permit(card_slots:[:locatin])
params.permit(card_slots:[:name])
params.permit(card_slots:[])
deck_params
@deck
n
continue
params[:deck]
deck_params
params
continue
deck_params
params
continue
params[:deck]
params
prams
continue
params[:deck]
params
deck_params
continue
c
c = Card.where("UPPER(name) like UPPER(%?%)", params[:name])
Card.where("UPPER(name) like UPPER(%?%)", params[:name])
Card.where("UPPER(name) like %UPPER(?)%", params[:name])
    Card.where('UPPER(name) like UPPER(?)', params[:name])
CardSuggestionService.search_by_name('a')
CardSuggestionService.search_by_name
@cards
continue
params.permit(:name,:card_text)
params[:name]
params
continue
params[:search]
params[:search][
params[:search]["name"]
params[:search][:name]
params[:search]
params.search
params
continue
params
continue
params
continue
@user.password = 'me1234'
@user
n
netx
@user
user_params
continue
session
continue
exit
session
continue
session
current_user
continue
CardSuggestionService.commander([], [])
Card.where(can_be_commander: true)
Card.all
CardSuggestionService.commander([], [])
@cards
Card.count
CardSuggestionsService.commander([],[])
CardSuggesetionService.commander([],[])
@cards
continue
@cards
exit
continue
self.subtypes
self.types
self.supertypes
continue
self
tag_list
continue
next
Tagging.all
tag_list
c
continue
exit
continue
arr2
continue
self
continue
arr2
continue
self
arr2
continue
card.errors
exit
COLOR_DICT[c[0].to_sym]
COLOR_DICT[c[0]]
COLOR_DICT[c]
COLOR_DICT
c[0]
c = color[0].scan(/\w/)
a
a[COLOR_DICT[color[0].scan(/\w/)[0]]] = true
a = {}
color[0].scan(/\w/)
color[0].match(/\w/)
color.match(/\w/)
color.match(/\W/)
color[0]
color
exit
continue
exit
continue
self.can_be_commander
continue
self.can_be_commander
continue
self.can_be_commander
continue
self.can_be_commander
continue
self.can_be_commander
continue
self.can_be_commander
continue
self.can_be_commander
continue
self.can_be_commander
continue
self.can_be_commander
exit
continue
exit
continue
params
continue
params
continue
params[:user]
params
continue
next
user
next
params
exit
continue
params
continue
next
user
