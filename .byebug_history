c
@cards.count
n
result
n
limit
n
result.count
n
result.count
n
result.count
n
result.count
n
result.count
n
result.count
n
result.count
c
n
result.count
n
c
params[:is_tiny_leader]
result.count
n
result.count
n
result.count
n
result.count
c
result.count
result.count - result.where("name NOT IN (?)", params[:excluded_card_names]).count
result.where("name NOT IN (?)", params[:excluded_card_names]).count
result.where("name IN (?)", params[:excluded_card_names]).count
result.where("name IN (?)", params[:excluded_card_names])
n
c
params[:excluded_card_names]
result.count
result.where(name: "Shivan Dragon").count
n
result.where(name: "Shivan Dragon").count
n
params[:card_text]
result.where(name: "Shivan Dragon").count
n
result.where(name: "Shivan Dragon").count
params[:included_colors]
n
result.count
c
Card.joins(join_statement).where(query, *arguments).count
Card.joins(join_statement).where(query, *arguments)
n
result
c
result.map(&:name)
result.count
n
arguments
query
n
result.count
c
result.map { |c| c.taggings.count }
result.map(&:taggings)
result.map(&:name)
result.count
c
limitc
params[:limit]
limit
n
result.count
c
result.count
result
n
query
n
result.count
n
result.count
n
result.count
n
result.count
n
result.count
n
result.count
c
Category.find(18)
arguments
query
n
result.count
n
result.count
n
result.count
n
result.count
n
c
params[:category_ids]
params
c
params[:category_ids]
params
c
prams
params[:category_ids]
prams[:category_ids]
params
c
params[:category_ids]
params
c
params[:category_ids]
params
c
params[:category_ids]
params.category_ids
params.category
params
c
@deck.update(deck_params)
c
n
deck_params
@deck
c
n
result.count
n
result.count
c
result.countc
result.count
result.where("name NOT IN (?)", params[:excluded_card_names])
result.where("name LIKE '%Rafiq%'")
result.where("name LIKE '%Rafiq%')
n
result.where("name LIKE '%Rafiq%'")
result.where("name LIKE '%Rafiq%')
result.count
n
params[:excluded_card_names]
result.count
n
result.count
n
result.count
n
result.count
continue
n
c
result.count
result
continue
c
result.where("name NOT IN (?)", params[:excluded_card_names]).where("name LIKE '%Rafiq%'")c
result.where("name NOT IN (?)", params[:excluded_card_names]).where("name LIKE '%Rafiq%'")
result.where("name NOT IN (?)", params[:excluded_card_names]).where("name LIKE '%Rafiq%')
result.where("name NOT IN (?)", params[:excluded_card_names]).where(name: "Rafiq of the Many")
result.where("name NOT IN (?)", params[:excluded_card_names])
result.count
n
result.count
c
params[:excluded_card_names]
;2C
params
prams[:excucluded_card_names]
result.count
n
result.count
n
result.count
n
c
n
c
n
params
n
c
result.map(&:name)
reult.map(&:name)
result.count
n
c
n
result.count
n
result.count
c
n
c
result.count
n
c
n
params[:commander]
c
result.count
n
c
exit
c
produces.select { |k,v| v }.keys
produces.select { |k,v| v }
produces['any color'] = true
produces
c
produces.any? { |k,v| v }
produces.select { |k,v| v }
produces
c
color
c
contine
produces[COLOR_DICT[symbol[1]]] = true
produces
COLOR_DICT[symbol[1]]
COLOR_DICT
symbol[1]
symbol
c
a
query
n
c
cc
c
query
c
n
self
c
Category.find(8).is_keyword
Category.find(8).is_tribal
Category.find(8).generate_query
Category.find(8)
params[:category_ids]
category_ids
query
n
result.count
c
